package com.jymj.zhglxt.zjd.presenter

import android.view.View
import com.chad.library.adapter.base.BaseQuickAdapter
import com.chad.library.adapter.base.BaseViewHolder
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.jymj.zhglxt.api.ApiConstants
import com.jymj.zhglxt.ldrkgl.base.BaseNet
import com.jymj.zhglxt.rjhj.bean.CjEntity
import com.jymj.zhglxt.rjhj.bean.SysUserEntity
import com.jymj.zhglxt.rjhj.bean.SysXzqEntity
import com.jymj.zhglxt.util.AesEncryptUtils
import com.jymj.zhglxt.util.JsonToMapUtil
import com.jymj.zhglxt.zjd.bean.bcjc.BcjcBbBean
import com.jymj.zhglxt.zjd.bean.bcjc.OptionsEntity
import com.jymj.zhglxt.zjd.bean.bcjc.ReportDto
import com.jymj.zhglxt.zjd.contract.AddUserContract
import com.jymj.zhglxt.zjd.contract.CbbsjsxContract
import com.lzy.okgo.OkGo
import com.lzy.okgo.model.HttpParams
import com.lzy.okgo.model.Response
import com.lzy.okgo.request.base.Request
import com.setsuna.common.baseapp.AppCache
import com.setsuna.common.basebean.BaseRespose
import com.setsuna.common.basebean.BaseResposeDate
import com.setsuna.common.basebean.BaseResposeUser
import com.setsuna.common.basebean.BaseResposeXzqList
import org.json.JSONObject
import java.util.*

class CbbsjsxPresenter : CbbsjsxContract.Companion.Presenter(){

    override fun getAddUser(message: SysUserEntity) {//添加/修改用户
        val toJson = Gson().toJson(message)//.substring(18, Gson().toJson(enviorSupvsEntity).toString().length - 1)
//        BaseRespose<PageUtils<ScoreEntity>>

        OkGo.post<BaseRespose<String>>(ApiConstants.SYS_USER_SAVEUSER).upJson(toJson).execute(object ://
                BaseNet<BaseRespose<String>>(){
            override fun onStart(request: Request<BaseRespose<String>, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }

            override fun onSuccess(response: Response<BaseRespose<String>>?) {
                val body = response!!.body()
                if (response!=null){
                    if (response.body()!=null){
                        if (body.code==0 ){//&& response.body().data.ylEntity!=null
                            mView?.returnAddUser("保存成功")

                        }else{
                            mView?.showErrorTip(body.getMsg())
                        }
                    }else{
                        mView?.showErrorTip("保存失败")
                    }
                }else{
                    mView?.showErrorTip("保存失败")
                }
                mView!!.stopLoading()

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<BaseRespose<String>>?) {
                super.onError(response)
                if (response!=null){
                    if (response.exception!=null){
                        if (response.exception.message!=null){
                            if (!response.exception.message.equals(""))
                                mView.showErrorTip("手机号/用户名已经存在")//response.exception.message
                            else
                                mView.showErrorTip("保存失败")
                        }else{
                            mView.showErrorTip("保存失败")
                        }

                    }else{
                        mView.showErrorTip("添加失败")
                    }

                }
//                mView.showErrorTip("网络错误")
            }

        })
    }
    /*override fun getUpdateUser(message: SysUserEntity) {//修改用户
        val toJson = Gson().toJson(message)//.substring(18, Gson().toJson(enviorSupvsEntity).toString().length - 1)
//        BaseRespose<PageUtils<ScoreEntity>>

        OkGo.post<BaseRespose<String>>(ApiConstants.LOGIN_UPDATE_USER).upJson(toJson).execute(object ://
                BaseNet<BaseRespose<String>>(){
            override fun onStart(request: Request<BaseRespose<String>, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }

            override fun onSuccess(response: Response<BaseRespose<String>>?) {
                val body = response!!.body()
                if (response!=null){
                    if (response.body()!=null){
                        if (body.code==0 ){//&& response.body().data.ylEntity!=null
                            mView?.returnUpdateUser("修改成功")
                        }else{
                            mView?.showErrorTip(body.getMsg())
                        }
                    }else{
                        mView?.showErrorTip("修改失败")
                    }
                }else{
                    mView?.showErrorTip("修改失败")
                }
                mView!!.stopLoading()

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<BaseRespose<String>>?) {
                super.onError(response)
                if (response!=null){
                    if (response.exception!=null){
                        if (response.exception.message!=null){
                            if (!response.exception.message.equals(""))
                                mView.showErrorTip(response.exception.message)
                            else
                                mView.showErrorTip("修改失败")
                        }else{
                            mView.showErrorTip("修改失败")
                        }

                    }else{
                        mView.showErrorTip("修改失败")
                    }

                }
//                mView.showErrorTip("网络错误")
            }

        })
    }*/
    override fun getUserInfo(userId:String) {
        val httpParams1 = JSONObject()
        httpParams1.put("userId",userId)
        OkGo.post<BaseResposeUser<SysUserEntity>>(ApiConstants.SYS_USER_INFO).upJson(httpParams1).execute(object : BaseNet<BaseResposeUser<SysUserEntity>>(){
            override fun onStart(request: Request<BaseResposeUser<SysUserEntity>, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }
            override fun onSuccess(response: Response<BaseResposeUser<SysUserEntity>>?) {
                val body = response!!.body()
                if (response!=null){
                    if (response.body()!=null){
                        if (body.code==0 ){//&& response.body().data.ylEntity!=null
                            mView?.returnUserInfo(body.getUser())
                        }else{
                            mView?.showErrorTip(body.getMsg())
                        }
                    }else{
                        mView?.showErrorTip("查询失败")
                    }
                }else{
                    mView?.showErrorTip("查询失败")
                }
                mView!!.stopLoading()

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<BaseResposeUser<SysUserEntity>>?) {
                super.onError(response)
                if (response!=null){
                    if (response.message()!=null){
                        if (!response.message().equals(""))
                            mView.showErrorTip(response.message())
                        else
                            mView.showErrorTip("查询失败")
                    }else{
                        mView.showErrorTip("查询失败")
                    }

                }
//                mView.showErrorTip("网络错误")
            }

        })
    }
    override fun getBcjcYears() {
        val jsonObject = JSONObject()
        val encrypt = AesEncryptUtils.encrypt("{}".toString())//"{\"username\":\"hc"+uName+"\",\"password\":\""+uPwd+"\",\"deviceId\":\""+deviceId+"\"}"
        var sss = "{\"requestData\":\"" + encrypt + "\"}"
        OkGo.post<String> (ApiConstants.BCJC_GETYEARS).upJson(sss).execute(object ://EnviorListEntity
                BaseNet<String>(){
            override fun onStart(request: Request<String, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }

            override fun onSuccess(response: Response<String>?) {
                val cash = response?.body()
                if (cash != null) {
                    val decrypt = AesEncryptUtils.decrypt(cash)
                    val json: BaseRespose<List<String>> = Gson().fromJson(decrypt, object : TypeToken<BaseRespose<List<String>>?>() {}.type)
                    if (json.code==0){
                        if (json.data!=null){
                            mView.returnBcjcYears(json.data)
                        }else{
                            mView.showErrorTip("数据加载为空")
                        }
                    }else{
                        mView.showErrorTip(json.msg)
                    }

                } else {
                    mView.showErrorTip("数据加载为空")
                }
            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<String>?) {
                super.onError(response)
                mView.showErrorTip("网络错误")
            }

        })
    }
    //获取村庄
    override fun getQueryCun(name:String) {
        val jsonObject = JSONObject()
        jsonObject.put("code",AppCache.getInstance().code)//date   BaseResposeDate<>
        jsonObject.put("name",name)//date   BaseResposeDate<>
        jsonObject.put("type",4)//date   BaseResposeDate<>

        val encrypt = AesEncryptUtils.encrypt(jsonObject.toString())//"{\"username\":\"hc"+uName+"\",\"password\":\""+uPwd+"\",\"deviceId\":\""+deviceId+"\"}"
        var sss = "{\"requestData\":\"" + encrypt + "\"}"
        OkGo.post<String>(ApiConstants.SYS_XZQ_QUERY_XZQ_LIST).upJson(sss).execute(object ://httpParams  .upJson("{\"name\":\""+name+"\"}")
                BaseNet<String>(){//BaseResposeDate<List<CjEntity>>
        override fun onStart(request: Request<String, out Request<Any, Request<*, *>>>?) {
            super.onStart(request)
//                mView.showLoading("数据加载中...")
        }

            override fun onSuccess(response: Response<String>?) {
                val cash = response?.body()
//                Log.e("--------",cash.toString());
                if (cash!=null){
                    val decrypt = AesEncryptUtils.decrypt(cash)
                    val json: BaseRespose<ArrayList<SysXzqEntity>> = Gson().fromJson(decrypt, object : TypeToken<BaseRespose<ArrayList<SysXzqEntity>>?>() {}.type)
                    if (json.code==0){
                        if (json!!.data!=null){
                            if (name.equals("")){
                                mView.returnQueryCun(ArrayList<SysXzqEntity>())
                            }else{
                                mView.returnQueryCun(json!!.data)
                            }
                        }else {
                            mView.returnQueryCun(ArrayList<SysXzqEntity>())
                            mView.showErrorTip("数据为空")
                        }
                    }else{
                        mView.returnQueryCun(ArrayList<SysXzqEntity>())
                        mView.showErrorTip(json.msg)
                    }
                }

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<String>?) {
                super.onError(response)
                mView.returnQueryCun(ArrayList<SysXzqEntity>())

                if (response!!.exception!=null){
                    if (response.exception.message!=null){
                        mView.showErrorTip(response.exception.message)
                    }else{
                        mView.showErrorTip("请求失败")
                    }
                }else{
                    mView.showErrorTip("请求失败")
                }

            }

        })
    }
    //树形  行政区
    override fun getXzqZhen() {
        val httpParams1 = JSONObject()
//        httpParams1.put("code",code)
//        httpParams1.put("type",type)
        OkGo.post<BaseResposeXzqList<SysXzqEntity>>(ApiConstants.SYS_XZQ_PERMS).upJson(httpParams1).execute(object : BaseNet<BaseResposeXzqList<SysXzqEntity>>(){
            override fun onStart(request: Request<BaseResposeXzqList<SysXzqEntity>, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }
            override fun onSuccess(response: Response<BaseResposeXzqList<SysXzqEntity>>?) {
                val body = response!!.body()
                if (response!=null){
                    if (response.body()!=null){
                        if (body.code==0 ){//&& response.body().data.ylEntity!=null
                            mView?.returnXzqZhen(body.getXzqList())
                        }else{
                            mView?.returnXzqZhen(ArrayList<SysXzqEntity>())
                            mView?.showErrorTip(body.getMsg())
                        }
                    }else{
                        mView?.returnXzqZhen(ArrayList<SysXzqEntity>())
                        mView?.showErrorTip("查询失败")
                    }
                }else{
                    mView?.returnXzqZhen(ArrayList<SysXzqEntity>())
                    mView?.showErrorTip("查询失败")
                }
                mView!!.stopLoading()

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<BaseResposeXzqList<SysXzqEntity>>?) {
                super.onError(response)
                mView?.returnXzqZhen(ArrayList<SysXzqEntity>())
                if (response!=null){
                    if (response.message()!=null){
                        if (!response.message().equals(""))
                            mView.showErrorTip(response.message())
                        else
                            mView.showErrorTip("查询失败")
                    }else{
                        mView.showErrorTip("查询失败")
                    }

                }
//                mView.showErrorTip("网络错误")
            }

        })
    }
    override fun getBcjcGetReprot(message: ReportDto) {//添加/修改用户

        val toJson = Gson().toJson(message)//.substring(18, Gson().toJson(enviorSupvsEntity).toString().length - 1)
//        BaseRespose<PageUtils<ScoreEntity>>
        OkGo.post<String>(ApiConstants.BCJC_GET_REPORT).upJson(toJson).execute(object ://  BcjcBbBean  BaseRespose<Object>
                BaseNet<String>(){
            override fun onStart(request: Request<String, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }

            override fun onSuccess(response: Response<String>?) {//Map<String, BcjcBbBean>
                val body = response!!.body()
                if (response!=null){
                    if (response.body()!=null){//ArrayList<BcjcBbBean>
                        val json: BaseRespose<HashMap<String,ArrayList<Object>>> = Gson().fromJson(body, object : TypeToken<BaseRespose<HashMap<String,ArrayList<Object>>>?>() {}.type)

                        if (json.code==0 ){//&& response.body().data.ylEntity!=null
                            if (json.data!=null){
//                                val toJson1 = Gson().toJson(body.data)
//                                val jsonToMap = JsonToMapUtil.jsonToMap(toJson1)
                                mView?.returnBcjcGetReprot(json.data)
                            }else{
                                mView?.showErrorTip("未查询到符合该条件的数据")
                            }
                        }else{
                            mView?.showErrorTip("未查询到符合该条件的数据")
                        }
                    }else{
                        mView?.showErrorTip("未查询到符合该条件的数据")
                    }
                }else{
                    mView?.showErrorTip("未查询到符合该条件的数据")
                }
                mView!!.stopLoading()

            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<String>?) {
                super.onError(response)
                if (response!=null){
                    if (response.exception!=null){
                        if (response.exception.message!=null){
                            if (!response.exception.message.equals(""))
                                mView.showErrorTip(response.exception.message)//response.exception.message
                            else
                                mView.showErrorTip("未查询到符合该条件的数据")
                        }else{
                            mView.showErrorTip("未查询到符合该条件的数据")
                        }

                    }else{
                        mView.showErrorTip("未查询到符合该条件的数据")
                    }

                }
//                mView.showErrorTip("网络错误")
            }

        })
    }


    override fun getBcjcGetOptions() {

        var ss = "{}"
        val encrypt = AesEncryptUtils.encrypt(ss.toString())//"{\"username\":\"hc"+uName+"\",\"password\":\""+uPwd+"\",\"deviceId\":\""+deviceId+"\"}"
        var sss = "{\"requestData\":\"" + encrypt + "\"}"
        OkGo.post<String> (ApiConstants.BCJC_GET_OPTIONS).upJson(sss).execute(object ://EnviorListEntity
                BaseNet<String>(){
            override fun onStart(request: Request<String, out Request<Any, Request<*, *>>>?) {
                super.onStart(request)
                mView.showLoading("数据加载中...")
            }

            override fun onSuccess(response: Response<String>?) {
                val cash = response?.body()
                if (cash != null) {
                    val decrypt = AesEncryptUtils.decrypt(cash)
                    val json: BaseRespose<List<OptionsEntity>> = Gson().fromJson(decrypt, object : TypeToken<BaseRespose<List<OptionsEntity>>?>() {}.type)
                    if (json.code==0){
                        if (json.data!=null){
                            mView.returnBcjcGetOptions(json.data)
                        }else{
                            mView.showErrorTip("数据加载为空")
                        }
                    }else{
                        mView.showErrorTip(json.msg)
                    }

                } else {
                    mView.showErrorTip("数据加载为空")
                }
            }

            override fun onFinish() {
                super.onFinish()
                mView.stopLoading()
            }

            override fun onError(response: Response<String>?) {
                super.onError(response)
                mView.showErrorTip("网络错误")
            }

        })
    }


}